/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Features from './Features';
import Image from './Image';

/**
 * The ObjectInstance model module.
 * @module model/ObjectInstance
 * @version 1.3.0
 */
class ObjectInstance {
    /**
     * Constructs a new <code>ObjectInstance</code>.
     * @alias module:model/ObjectInstance
     */
    constructor() { 
        
        ObjectInstance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectInstance} obj Optional instance to populate.
     * @return {module:model/ObjectInstance} The populated <code>ObjectInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectInstance();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('profileId')) {
                obj['profileId'] = ApiClient.convertToType(data['profileId'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = Features.constructFromObject(data['features']);
            }
        }
        return obj;
    }


}

/**
 * The ID of the object instance, containing the feature vector. ObjectInstances belong to ObjectProfiles, which in turn belong to ObjectCollections.
 * @member {String} id
 */
ObjectInstance.prototype['id'] = undefined;

/**
 * The ID of parent profile.
 * @member {String} profileId
 */
ObjectInstance.prototype['profileId'] = undefined;

/**
 * @member {module:model/Image} image
 */
ObjectInstance.prototype['image'] = undefined;

/**
 * @member {module:model/Features} features
 */
ObjectInstance.prototype['features'] = undefined;






export default ObjectInstance;

