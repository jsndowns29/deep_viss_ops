/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceStatus model module.
 * @module model/SourceStatus
 * @version 1.3.0
 */
class SourceStatus {
    /**
     * Constructs a new <code>SourceStatus</code>.
     * @alias module:model/SourceStatus
     */
    constructor() { 
        
        SourceStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceStatus} obj Optional instance to populate.
     * @return {module:model/SourceStatus} The populated <code>SourceStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceStatus();

            if (data.hasOwnProperty('ingestedFrame')) {
                obj['ingestedFrame'] = ApiClient.convertToType(data['ingestedFrame'], 'Number');
            }
            if (data.hasOwnProperty('processedFrames')) {
                obj['processedFrames'] = ApiClient.convertToType(data['processedFrames'], 'Number');
            }
            if (data.hasOwnProperty('ingestedErrorCount')) {
                obj['ingestedErrorCount'] = ApiClient.convertToType(data['ingestedErrorCount'], 'Number');
            }
            if (data.hasOwnProperty('processedErrorCount')) {
                obj['processedErrorCount'] = ApiClient.convertToType(data['processedErrorCount'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Number of frame which have been successfully captured.
 * @member {Number} ingestedFrame
 */
SourceStatus.prototype['ingestedFrame'] = undefined;

/**
 * Number of frame which have been successfully processed.
 * @member {Number} processedFrames
 */
SourceStatus.prototype['processedFrames'] = undefined;

/**
 * Number of errors, dropped or missed frames from acquisition
 * @member {Number} ingestedErrorCount
 */
SourceStatus.prototype['ingestedErrorCount'] = undefined;

/**
 * Number of errors, dropped or missed frames from processing
 * @member {Number} processedErrorCount
 */
SourceStatus.prototype['processedErrorCount'] = undefined;






export default SourceStatus;

