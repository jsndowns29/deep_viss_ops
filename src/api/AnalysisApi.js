/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Frame from '../model/Frame';
import ProcessingRequest from '../model/ProcessingRequest';

/**
* Analysis service.
* @module api/AnalysisApi
* @version 1.3.0
*/
export default class AnalysisApi {

    /**
    * Constructs a new AnalysisApi. 
    * @alias module:api/AnalysisApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the imageAnalysis operation.
     * @callback module:api/AnalysisApi~imageAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Frame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze a single image
     * @param {Object} opts Optional parameters
     * @param {String} opts.streamId The identifier of the stream
     * @param {Array.<File>} opts.filename 
     * @param {module:api/AnalysisApi~imageAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Frame>}
     */
    imageAnalysis(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'streamId': opts['streamId']
      };
      let headerParams = {
      };
      let formParams = {
        'filename': this.apiClient.buildCollectionParam(opts['filename'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Frame];
      return this.apiClient.callApi(
        '/analysis/Image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageArrayAnalysis operation.
     * @callback module:api/AnalysisApi~imageArrayAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Frame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze an array of images
     * @param {Object} opts Optional parameters
     * @param {String} opts.streamId The identifier of the stream
     * @param {Array.<File>} opts.filename 
     * @param {module:api/AnalysisApi~imageArrayAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Frame>}
     */
    imageArrayAnalysis(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'streamId': opts['streamId']
      };
      let headerParams = {
      };
      let formParams = {
        'filename': this.apiClient.buildCollectionParam(opts['filename'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Frame];
      return this.apiClient.callApi(
        '/analysis/ImagesArray', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processingRequest operation.
     * @callback module:api/AnalysisApi~processingRequestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Frame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze a specific frame
     * @param {module:model/ProcessingRequest} processingRequest Deliver the image to be analyzed *Markdown*
     * @param {Object} opts Optional parameters
     * @param {String} opts.streamId The identifier of the stream
     * @param {module:api/AnalysisApi~processingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Frame>}
     */
    processingRequest(processingRequest, opts, callback) {
      opts = opts || {};
      let postBody = processingRequest;
      // verify the required parameter 'processingRequest' is set
      if (processingRequest === undefined || processingRequest === null) {
        throw new Error("Missing the required parameter 'processingRequest' when calling processingRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'streamId': opts['streamId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json'];
      let returnType = [Frame];
      return this.apiClient.callApi(
        '/analysis/ProcessingRequest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
