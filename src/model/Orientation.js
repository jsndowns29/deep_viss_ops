/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Orientation model module.
 * @module model/Orientation
 * @version 1.3.0
 */
class Orientation {
    /**
     * Constructs a new <code>Orientation</code>.
     * @alias module:model/Orientation
     */
    constructor() { 
        
        Orientation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Orientation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Orientation} obj Optional instance to populate.
     * @return {module:model/Orientation} The populated <code>Orientation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Orientation();

            if (data.hasOwnProperty('yaw')) {
                obj['yaw'] = ApiClient.convertToType(data['yaw'], 'Number');
            }
            if (data.hasOwnProperty('pitch')) {
                obj['pitch'] = ApiClient.convertToType(data['pitch'], 'Number');
            }
            if (data.hasOwnProperty('roll')) {
                obj['roll'] = ApiClient.convertToType(data['roll'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The yaw of the detected object or event.
 * @member {Number} yaw
 */
Orientation.prototype['yaw'] = undefined;

/**
 * The pitch of the detected object or event.
 * @member {Number} pitch
 */
Orientation.prototype['pitch'] = undefined;

/**
 * The roll of the detected object or event.
 * @member {Number} roll
 */
Orientation.prototype['roll'] = undefined;






export default Orientation;

