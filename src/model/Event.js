/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attribute from './Attribute';
import Detection from './Detection';
import Features from './Features';
import Image from './Image';
import Tracking from './Tracking';

/**
 * The Event model module.
 * @module model/Event
 * @version 1.3.0
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * @alias module:model/Event
     */
    constructor() { 
        
        Event.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [Attribute]);
            }
            if (data.hasOwnProperty('tracking')) {
                obj['tracking'] = Tracking.constructFromObject(data['tracking']);
            }
            if (data.hasOwnProperty('detection')) {
                obj['detection'] = Detection.constructFromObject(data['detection']);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = Features.constructFromObject(data['features']);
            }
            if (data.hasOwnProperty('featuresMap')) {
                obj['featuresMap'] = ApiClient.convertToType(data['featuresMap'], [Features]);
            }
            if (data.hasOwnProperty('processedImage')) {
                obj['processedImage'] = Image.constructFromObject(data['processedImage']);
            }
        }
        return obj;
    }


}

/**
 * What type of event has been detected?
 * @member {String} objectType
 */
Event.prototype['objectType'] = undefined;

/**
 * Unique or almost-unique hash or identifier of the detected event. Can be computed as dependant on frame timestamp, position of detection and event type.
 * @member {String} id
 */
Event.prototype['id'] = undefined;

/**
 * What are the inferred attributes of the object?
 * @member {Array.<module:model/Attribute>} attributes
 */
Event.prototype['attributes'] = undefined;

/**
 * @member {module:model/Tracking} tracking
 */
Event.prototype['tracking'] = undefined;

/**
 * @member {module:model/Detection} detection
 */
Event.prototype['detection'] = undefined;

/**
 * @member {module:model/Features} features
 */
Event.prototype['features'] = undefined;

/**
 * What are the secondary features extracted from the detected object?
 * @member {Array.<module:model/Features>} featuresMap
 */
Event.prototype['featuresMap'] = undefined;

/**
 * @member {module:model/Image} processedImage
 */
Event.prototype['processedImage'] = undefined;






export default Event;

