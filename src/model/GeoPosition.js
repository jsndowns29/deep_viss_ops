/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeoPosition model module.
 * @module model/GeoPosition
 * @version 1.3.0
 */
class GeoPosition {
    /**
     * Constructs a new <code>GeoPosition</code>.
     * @alias module:model/GeoPosition
     * @param latitude {Number} The latitude at which the video source is installed.
     * @param longitude {Number} The longitude at which the video source is installed.
     */
    constructor(latitude, longitude) { 
        
        GeoPosition.initialize(this, latitude, longitude);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, latitude, longitude) { 
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
    }

    /**
     * Constructs a <code>GeoPosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoPosition} obj Optional instance to populate.
     * @return {module:model/GeoPosition} The populated <code>GeoPosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoPosition();

            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('altitude')) {
                obj['altitude'] = ApiClient.convertToType(data['altitude'], 'Number');
            }
            if (data.hasOwnProperty('elevation')) {
                obj['elevation'] = ApiClient.convertToType(data['elevation'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The latitude at which the video source is installed.
 * @member {Number} latitude
 */
GeoPosition.prototype['latitude'] = undefined;

/**
 * The longitude at which the video source is installed.
 * @member {Number} longitude
 */
GeoPosition.prototype['longitude'] = undefined;

/**
 * The altitude at which the video source is installed.
 * @member {Number} altitude
 */
GeoPosition.prototype['altitude'] = undefined;

/**
 * The elevation from the ground at which the video source is installed, measured in meters.
 * @member {Number} elevation
 */
GeoPosition.prototype['elevation'] = undefined;






export default GeoPosition;

