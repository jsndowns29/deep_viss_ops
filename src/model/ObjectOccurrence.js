/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FrameTimestamp from './FrameTimestamp';
import ObjectMatch from './ObjectMatch';

/**
 * The ObjectOccurrence model module.
 * @module model/ObjectOccurrence
 * @version 1.3.0
 */
class ObjectOccurrence {
    /**
     * Constructs a new <code>ObjectOccurrence</code>.
     * @alias module:model/ObjectOccurrence
     */
    constructor() { 
        
        ObjectOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectOccurrence} obj Optional instance to populate.
     * @return {module:model/ObjectOccurrence} The populated <code>ObjectOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectOccurrence();

            if (data.hasOwnProperty('sourceId')) {
                obj['sourceId'] = ApiClient.convertToType(data['sourceId'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = FrameTimestamp.constructFromObject(data['timestamp']);
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('objectInstanceId')) {
                obj['objectInstanceId'] = ApiClient.convertToType(data['objectInstanceId'], 'String');
            }
            if (data.hasOwnProperty('matches')) {
                obj['matches'] = ApiClient.convertToType(data['matches'], [ObjectMatch]);
            }
        }
        return obj;
    }


}

/**
 * The ID of the source from which the frame originated
 * @member {String} sourceId
 */
ObjectOccurrence.prototype['sourceId'] = undefined;

/**
 * @member {module:model/FrameTimestamp} timestamp
 */
ObjectOccurrence.prototype['timestamp'] = undefined;

/**
 * The ID of the object instance
 * @member {String} eventId
 */
ObjectOccurrence.prototype['eventId'] = undefined;

/**
 * The id of the object instance.
 * @member {String} objectInstanceId
 */
ObjectOccurrence.prototype['objectInstanceId'] = undefined;

/**
 * The list of profile that object matched as compared to a list of collections, at a specific time
 * @member {Array.<module:model/ObjectMatch>} matches
 */
ObjectOccurrence.prototype['matches'] = undefined;






export default ObjectOccurrence;

