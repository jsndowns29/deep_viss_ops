/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Event from './Event';
import FrameTimestamp from './FrameTimestamp';
import Image from './Image';

/**
 * The Frame model module.
 * @module model/Frame
 * @version 1.3.0
 */
class Frame {
    /**
     * Constructs a new <code>Frame</code>.
     * @alias module:model/Frame
     */
    constructor() { 
        
        Frame.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Frame</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Frame} obj Optional instance to populate.
     * @return {module:model/Frame} The populated <code>Frame</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Frame();

            if (data.hasOwnProperty('timestamps')) {
                obj['timestamps'] = ApiClient.convertToType(data['timestamps'], [FrameTimestamp]);
            }
            if (data.hasOwnProperty('frameId')) {
                obj['frameId'] = ApiClient.convertToType(data['frameId'], 'String');
            }
            if (data.hasOwnProperty('frameCounter')) {
                obj['frameCounter'] = ApiClient.convertToType(data['frameCounter'], 'Number');
            }
            if (data.hasOwnProperty('sourceId')) {
                obj['sourceId'] = ApiClient.convertToType(data['sourceId'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [Event]);
            }
            if (data.hasOwnProperty('timing')) {
                obj['timing'] = ApiClient.convertToType(data['timing'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('debug')) {
                obj['debug'] = ApiClient.convertToType(data['debug'], {'String': Object});
            }
        }
        return obj;
    }


}

/**
 * Defines the several timestamps of acquisition, reception, pre-processing and post-processing respectively.
 * @member {Array.<module:model/FrameTimestamp>} timestamps
 */
Frame.prototype['timestamps'] = undefined;

/**
 * Alpha-numeric, unique id of frame. You can use (timestamp+sourceId) or sha512(timestamp+sourceId)
 * @member {String} frameId
 */
Frame.prototype['frameId'] = undefined;

/**
 * Per-source incremental frame counter
 * @member {Number} frameCounter
 */
Frame.prototype['frameCounter'] = undefined;

/**
 * Video source id.
 * @member {String} sourceId
 */
Frame.prototype['sourceId'] = undefined;

/**
 * @member {module:model/Image} image
 */
Frame.prototype['image'] = undefined;

/**
 * @member {Array.<module:model/Event>} events
 */
Frame.prototype['events'] = undefined;

/**
 * @member {Object.<String, Number>} timing
 */
Frame.prototype['timing'] = undefined;

/**
 * @member {Object.<String, Object>} debug
 */
Frame.prototype['debug'] = undefined;






export default Frame;

