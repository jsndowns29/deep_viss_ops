/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metric from './Metric';
import ObjectProfile from './ObjectProfile';

/**
 * The ObjectCollection model module.
 * @module model/ObjectCollection
 * @version 1.3.0
 */
class ObjectCollection {
    /**
     * Constructs a new <code>ObjectCollection</code>.
     * @alias module:model/ObjectCollection
     */
    constructor() { 
        
        ObjectCollection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectCollection} obj Optional instance to populate.
     * @return {module:model/ObjectCollection} The populated <code>ObjectCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectCollection();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = Metric.constructFromObject(data['metric']);
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
            if (data.hasOwnProperty('profiles')) {
                obj['profiles'] = ObjectProfile.constructFromObject(data['profiles']);
            }
        }
        return obj;
    }


}

/**
 * The ID of the collection
 * @member {String} id
 */
ObjectCollection.prototype['id'] = undefined;

/**
 * The human-readable name of the collection
 * @member {String} name
 */
ObjectCollection.prototype['name'] = undefined;

/**
 * The type of objects in the collection. A collection can only hold objects of the same type.
 * @member {String} objectType
 */
ObjectCollection.prototype['objectType'] = undefined;

/**
 * The name and version of the algorithm used for feature extraction. A collection can only hold objects with the same feature space (latent space).
 * @member {String} algorithm
 */
ObjectCollection.prototype['algorithm'] = undefined;

/**
 * @member {module:model/Metric} metric
 */
ObjectCollection.prototype['metric'] = undefined;

/**
 * The recommended metric value recommended to be used as threshold
 * @member {Number} threshold
 */
ObjectCollection.prototype['threshold'] = undefined;

/**
 * @member {module:model/ObjectProfile} profiles
 */
ObjectCollection.prototype['profiles'] = undefined;






export default ObjectCollection;

