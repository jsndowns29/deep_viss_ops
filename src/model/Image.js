/**
 * DeepVISS OPS
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Image model module.
 * @module model/Image
 * @version 1.3.0
 */
class Image {
    /**
     * Constructs a new <code>Image</code>.
     * @alias module:model/Image
     */
    constructor() { 
        
        Image.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Image} obj Optional instance to populate.
     * @return {module:model/Image} The populated <code>Image</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Image();

            if (data.hasOwnProperty('imageURL')) {
                obj['imageURL'] = ApiClient.convertToType(data['imageURL'], 'String');
            }
            if (data.hasOwnProperty('imageBase64')) {
                obj['imageBase64'] = ApiClient.convertToType(data['imageBase64'], 'Blob');
            }
            if (data.hasOwnProperty('imageContentType')) {
                obj['imageContentType'] = ApiClient.convertToType(data['imageContentType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The URL where the image is stored.
 * @member {String} imageURL
 */
Image.prototype['imageURL'] = undefined;

/**
 * Base64 encoded string of the image.
 * @member {Blob} imageBase64
 */
Image.prototype['imageBase64'] = undefined;

/**
 * Image MIME-type, such as image/png or image/jpeg
 * @member {String} imageContentType
 */
Image.prototype['imageContentType'] = undefined;






export default Image;

